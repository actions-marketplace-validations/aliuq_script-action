name: Test Runner 2

on:
  workflow_dispatch:
    inputs:
      debug:
        description: Enable debug mode
        type: boolean
        required: false
        default: false

jobs:
  basic-tests:
    name: Basic Functionality Tests (${{ matrix.os }}-${{ matrix.mode }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        mode: [bun, tsx]
    steps:
      - uses: actions/checkout@v4

      - name: Basic Output Test
        uses: ./
        with:
          bun: ${{ matrix.mode == 'bun' }}
          debug: ${{ inputs.debug }}
          script: |
            console.log('Hello from Script Action!')
            if (${{ matrix.mode == 'bun' }}) {
              console.log('UUID', Bun.randomUUIDv7())
            }
            console.log('Current mode:', process.env.BUN ? 'bun' : 'tsx')

      - name: Environment Variable Test
        uses: ./
        env:
          TEST_VAR: test-value
        with:
          bun: ${{ matrix.mode == 'bun' }}
          script: |
            console.log('Environment variable:', process.env.TEST_VAR)

  package-management:
    name: Package Management Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Manual Package Installation Test
        uses: ./
        with:
          packages: axios dayjs
          script: |
            import axios from 'axios'
            import dayjs from 'dayjs'

            const date = dayjs().format('YYYY-MM-DD')
            try {
              const { data } = await axios.get('https://api.github.com/zen')
              console.log(`${date}: ${ data }`)
            } catch (error) {
              if (axios.isAxiosError(error)) {
                console.error('Error:', error.message, error.response?.data)
              } else {
                console.error('Unexpected error:', error)
              }
            }

      - name: Automatic Package Installation Test
        uses: ./
        with:
          bun: true
          auto_install: true
          script: |
            import { Octokit } from '@octokit/rest'
            const octokit = new Octokit()
            const { data } = await octokit.rest.rateLimit.get()
            console.log('API Rate Limit:', data.rate)

  zx-features:
    name: ZX Syntax Tests (${{ matrix.os }}-${{ matrix.mode }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        mode: [bun, tsx]
    steps:
      - uses: actions/checkout@v4

      - name: ZX Command Execution Test - bun
        uses: ./
        with:
          bun: true
          script: |
            // Execute system commands - using platform agnostic commands
            await $`echo "Current directory:"`
            await $`pwd`

            // Use glob with error handling
            try {
              const glob = new Bun.Glob()
              const tsFiles = await glob.scan('src/*.ts')
              console.log('TypeScript files:', tsFiles)
            } catch (error) {
              console.warn('Glob operation failed:', error)
            }

            // Use fetch (cross-platform compatible)
            const response = await fetch('https://api.github.com/zen')
            console.log('GitHub Zen:', await response.text())

      - name: ZX Command Execution Test - tsx
        uses: ./
        with:
          bun: false
          zx: true
          script: |
            // Execute system commands - using platform agnostic commands
            echo('Current directory:')
            const res1 = await $`pwd`.text()
            echo(res1)

            // Use glob with error handling
            try {
              const tsFiles = await glob('src/*.ts')
              console.log('TypeScript files:', tsFiles)
            } catch (error) {
              console.warn('Glob operation failed:', error)
            }

            // Use fetch (cross-platform compatible)
            const response = await fetch('https://api.github.com/zen')
            console.log('GitHub Zen:', await response.text())
